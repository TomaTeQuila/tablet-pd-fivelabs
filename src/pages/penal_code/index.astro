---
import Layout from "../../layouts/Layout.astro" 
import PenalCodeItems from "../../components/cards/PenalCodeItems.astro"
import CategoriesSideBar from "../../components/sidebars/CategoriesSideBar.astro";
import { getAllPenalCodes, type PenalCode } from '../../data/penalcode';
import PageHeader from "../../components/general/PageHeader.astro";
import GridContainer from "../../components/general/GridContainer.astro";

let penal_codes: PenalCode[] = [];

try {
  penal_codes = await getAllPenalCodes();
} catch (error) {
  console.error(`Error obteniendo datos para codigo penal: `, error);
}

---

<Layout title="Multas y condenas">
    <PageHeader 
        icon="gavel"
        title="Código Penal"
        description="Código penal. Todas los delitos junto a sus condenas"
        showSearch={true}
        searchPlaceholder="🔍 Buscar sentencia"
    />
    <div class="body">
        <div class="sidebar">
            <CategoriesSideBar penal_codes={penal_codes} selectedCategory="Todos"/>
        </div>
        <div id="penalCodesList">
            {penal_codes.map((penal_code) => (
                <PenalCodeItems 
                id={penal_code.id}
                name={penal_code.name}
                description={penal_code.description}
                fine={penal_code.fine}
                prison={penal_code.prison}
                category={penal_code.category}
                />
            ))}
            
        </div>

        <div class="no-results" id="noResults" style="display:none;">
            <span class="material-symbols-rounded">search_off</span>
            <p>No se encontraron resultados</p>
        </div>

    </div>

</Layout>

<style>
    .header-penal-code-section {
        display: flex;
        flex-direction: row;
        justify-content: start;
        align-items: center;
        padding: 16px
        width: 100%;
    }

    .header {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        margin: 1.25rem;
        width: 100%;
    }

    .header-items-top {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.40rem;
    }

    .header-items-top h1 {
        font-size: 1.25rem;
        color: var(--text-primary);
        font-family: 'Funnel Display', sans-serif;
        font-weight: 400;
    }

    .header-items p {
        display: flex;
        font-size: 1rem;
        color: var(--text-tertiary);
    }
    
    .search-input {
        background-color: transparent;
        border: 2px solid var(--border-color);
        border-radius: 5px;
        padding: 10px 10px;
        font-size: 1rem;
        font-family: 'Funnel Display', sans-serif;
        color: white;
        width: 20rem;
    }
    .body {
       display: grid;
       grid-template-columns: auto 1fr;
       gap: 8px;
       overflow-y: auto;
       flex: 1;
       min-height: 0;
    }

    .sidebar {
        margin: 10px 0px;
    }

</style>

<script>
/* Full hecho por IA esta wea xd */
(function () {
  const grid     = document.getElementById('penalCodesList')!;
  const noRes    = document.getElementById('noResults');
  const searchEl = document.getElementById('searchInput') as HTMLInputElement | null;

  let currentCategory = 'Todos';
  let currentSearch   = '';

  const cards = Array.from(grid.querySelectorAll<HTMLElement>('.card-wrapper'));
  const norm  = (s: string) => (s || '').toLowerCase().trim();

  function applyFilters() {
    const term = norm(currentSearch);
    let visible = 0;

    cards.forEach(card => {
      const cat  = card.dataset.category ?? 'Sin categoría';
      const name = card.dataset.name ?? '';
      const desc = card.dataset.description ?? '';

      const matchCat    = currentCategory === 'Todos' || cat === currentCategory;
      const matchSearch = !term || norm(name).includes(term) || norm(desc).includes(term);

      const show = matchCat && matchSearch;
      card.style.display = show ? '' : 'none';
      if (show) visible++;
    });

    if (noRes) noRes.style.display = visible === 0 ? 'flex' : 'none';
  }

  if (searchEl) {
    let t: number;
    searchEl.addEventListener('input', e => {
      clearTimeout(t);
      t = window.setTimeout(() => {
        currentSearch = (e.target as HTMLInputElement).value;
        applyFilters();
      }, 150);
    });
  }

  document.addEventListener('categoryChange', (e: any) => {
    currentCategory = e.detail.category;
    applyFilters();
  });

  applyFilters();
})();
</script>
