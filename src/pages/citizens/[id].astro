---
import Layout from "../../layouts/Layout.astro";
import CitizenDataCard from "../../components/cards/CitizenDataCard.astro";
import CrimeCard from "../../components/cards/CrimeCard.astro";
import VehicleCard from "../../components/cards/VehicleCard.astro";
import StatsCard from "../../components/cards/StatsCard.astro"
import defaultPic from "../../assets/default-pic.jpg";

import { getCrimesWithFallback, getUserCrimeStats, type Crime } from '../../data/crimes';
import { citizens } from "../../data/citizens";
import { vehicles, type Vehicle } from '../../data/vehicles';

export async function getStaticPaths() {
  return Object.values(citizens).map((c) => ({
    params: { id: c.id },
    props: {
      id: c.id,
      name: c.name,
      surname: c.surname,
      mugshot: c.mugshot,
      job: c.job,
    },
  }));
}

const { id, name, surname, mugshot: mugshotProp, job } = Astro.props;
const rawMugshot = mugshotProp || defaultPic;
const mugshot = typeof rawMugshot === 'string' ? rawMugshot : rawMugshot.src;
const base = "https://docs.fivem.net/vehicles/";
let citizenCrimes: Crime[] = [];
let crimeStats = { totalCrimes: 0, totalFines: 0, totalPrison: 0 };

try {
  citizenCrimes = await getCrimesWithFallback(id);
  crimeStats = await getUserCrimeStats(id);
} catch (error) {
  console.error(`Error obteniendo datos para ciudadano ${id}:`, error);
}

const citizenVehicles: Vehicle[] = (vehicles as Record<string, Vehicle[]>)[id] || []; 
---

<Layout title={`Ciudadano ${name} ${surname}`}>
  <div class="body-content">
    <section id="citizen-personal-data" class="citizen-personal-data">
      <img src={mugshot} alt={`Foto de ${name} ${surname}`} transition:name={`img-${id}`} />
      <div class="personal-data">
        <div class="text-personal-data">
          <p transition:name={`p-${id}`}>{id}</p>
          <h1 transition:name={`h1-${id}`}>{name} {surname}</h1>
          <div class="job-data">
            <span class="material-symbols-rounded">business_center</span>
            <h2>{job}</h2>
          </div>
        </div>
        <div class="personal-stats">
          <StatsCard 
            title="Delitos" 
            desc="Total delitos" 
            icon="gavel" 
            specValue={crimeStats.totalCrimes.toString()} 
          />
          <StatsCard 
            title="Vehiculos" 
            desc="Total vehiculos" 
            icon="directions_car" 
            specValue={citizenVehicles.length.toString()} 
          />
          <StatsCard 
            title="Multas" 
            desc="Monto y total de multas sin pagar" 
            icon="attach_money" 
            specValue={crimeStats.totalCrimes.toString()} 
            monto={`${crimeStats.totalFines}$`} 
          />
          <StatsCard 
            title="Propiedades" 
            desc="Total propiedades" 
            icon="apartment" 
            specValue="2"
          />
        </div>
      </div>
    </section>
    <section id="citizen-relations-data" class="citizen-relations-data">
      <div class="cars-data">
        <CitizenDataCard title="Vehículos">
          {citizenVehicles.map((vehicle, index) => (
            <VehicleCard
              index={index + 1}
              model={vehicle.model}
              type={vehicle.type}
              plate={vehicle.plate}
              color={vehicle.color}
              image={`${base}/${vehicle.model.toLowerCase()}.webp`}
              notes={vehicle.notes}
            />
          ))}
        </CitizenDataCard>
      </div>

      <div class="property-data">
        <CitizenDataCard title="Propiedades">
        </CitizenDataCard>
      </div>

      <div class="prontuario-data">
        <CitizenDataCard title="Prontuario" id={id}>
          {citizenCrimes.length > 0 ? (
            citizenCrimes.map((crime: Crime, index: number) => (
              <CrimeCard
                index={index + 1}
                name={crime.name}
                date={crime.date}
                hour={crime.hour}
                details={crime.details}
                conviction={crime.conviction}
                fine={crime.fine}
              />
            ))
          ) : (
            <div class="no-crimes">
              <p>No hay crímenes registrados para este ciudadano.</p>
            </div>
          )}
        </CitizenDataCard>
      </div>
      
    </section>
  </div>
</Layout>

<style>
  .citizen-relations-data {
    height: 100%;
    overflow: auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    margin-top: 2rem;
  }

  img {
    max-width: 220px;
    width: 100%;
    box-shadow: 0px 0px 2px rgb(122, 118, 173);
    border: 3px solid var(--border-color);
  }

  .body-content {
    display: flex;
    flex-direction: column;
    padding: 1rem;
    height: 100%;
  }

  .citizen-personal-data {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
  }

  .personal-data {
    height: 100%;
    margin-left: 1rem;
    width: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .text-personal-data p {
    font-size: 1.2rem;
    color: var(--text-tertiary);
    font-family: 'Funnel Display', sans-serif;
    font-weight: 800;
    margin: 0;
  }

  .text-personal-data h1 {
    font-size: 2rem;
    color: var(--text-primary);
    font-family: 'Funnel Display', sans-serif;
    font-weight: 300;
    margin: 0;
  }

  .text-personal-data h2 {
    font-family: 'Funnel Display', sans-serif;
    font-weight: 100;
    font-size: 1.3rem;
    text-transform: uppercase;
    margin: 0;
  }

  .job-data {
    display: flex;
    flex-direction: row;
    gap: 0.25rem;
  }
  
  .personal-stats {
    margin-top: auto;
    display: grid;
    grid-template-columns: 1fr 1fr 2fr auto;
    gap: 5px;
  }

  .no-crimes {
    grid-column: 1 / -1;
    text-align: center;
    padding: 2rem;
    color: var(--text-secondary);
    font-style: italic;
  }
</style>

<script>
  // Script para recargar los datos cuando sea necesario
  document.addEventListener('DOMContentLoaded', () => {
    // Agregar funcionalidad para recargar crímenes si es necesario
    const refreshButton = document.getElementById('refresh-crimes');
    if (refreshButton) {
      refreshButton.addEventListener('click', () => {
        window.location.reload();
      });
    }
  });
</script>