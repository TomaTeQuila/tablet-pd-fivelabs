---
import Layout from "../../../layouts/Layout.astro";
import StatsCard from "../../../components/cards/StatsCard.astro";
import CategoriesSideBar from "../../../components/sidebars/CategoriesSideBar.astro";
import PenalCodeItems from "../../../components/cards/PenalCodeItems.astro";
import { getAllPenalCodes, type PenalCode } from '../../../data/penalcode';


import { citizens } from "../../../data/citizens";
import { sourceOfficerData } from "../../../data/officer";

export async function getStaticPaths() {
  return Object.values(citizens).map((c) => ({
    params: { id: c.id.toString() },
    props: {
      id: c.id,
      name: c.name,
      surname: c.surname,
      mugshot: c.mugshot,
      job: c.job,
    },
  }));
}

const { id, name, surname, mugshot: mugshotProp, job } = Astro.props;

let penal_codes: PenalCode[] = [];
try {
  penal_codes = await getAllPenalCodes();
} catch (error) {
  console.error(`Error obteniendo datos para codigo penal: `, error);
}
---

<Layout title="Add Crime">
  <div class="container">
    <section class="header-section sticky-header">
      <div class="header">
        <div class="header-items">
          <div class="header-items-top">
            <span class="material-symbols-rounded">add_notes</span>
            <h1>Aplicar sentencia</h1>
          </div>
          <p>
            Selecciona los crímenes cometidos por el ciudadano, y aplica la
            sentencia total
          </p>
          <p transition:name={`h1-${id}`}>
            {name} {surname} | <span transition:name={`p-${id}`}>{id}</span>
          </p>
        </div>
      </div>
      <div class="offense-resume">
        <div class="offense-resume-card">
          <StatsCard
            title="Monto total"
            icon="attach_money"
            desc="Total de monto a pagar en base a multas"
            specValue="0 $"
          />
          <StatsCard
            title="Condena"
            icon="rule"
            desc="Total de condena que deberá cumplir el ciudadano"
            specValue="0 meses"
          />
          <StatsCard
            title="Total crímenes imputados"
            icon="files"
            desc="Total de crímenes que se le imputan al ciudadano"
            specValue="0"
          />
        </div>
      </div>
    </section>

    <section class="body-section">
      <div class="penal-codes-container">
        <div class="sidebar-container">
          <div class="category-sidebar">
            <CategoriesSideBar penal_codes={penal_codes} selectedCategory="Todos" />
          </div>
          
          <div class="action-buttons">
            <button type="button" class="btn-apply" id="applyButton" disabled>
              <span class="material-symbols-rounded">gavel</span>
              Aplicar sentencia
            </button>
            <button type="button" class="btn-cancel" onclick="window.history.back()">
              <span class="material-symbols-rounded">close</span>
              Cancelar
            </button>
            
          </div>
        </div>

        <div class="penal-codes-card">
          <div class="search">
            <input
              type="text"
              placeholder="🔍 Buscar por nombre o descripción"
              class="search-input"
              id="searchInput"
              autocomplete="off"
              value=""
            />
          </div>

          <div class="penal-codes-grid" id="penalCodesGrid">
            {penal_codes.length > 0 ? (
              penal_codes.map((penal_code) => (
                <PenalCodeItems
                  id={penal_code.id}
                  name={penal_code.name}
                  description={penal_code.description}
                  fine={penal_code.fine}
                  prison={penal_code.prison}
                  category={penal_code.category}
                />
              ))
            ) : (
              <div class="no-codes">
                <span class="material-symbols-rounded">error</span>
                <p>No se pudieron cargar los códigos penales</p>
                <button onclick="window.location.reload()" class="retry-btn">
                  <span class="material-symbols-rounded">refresh</span>
                  Reintentar
                </button>
              </div>
            )}
          </div>

          <div class="no-results" id="noResults" style="display: none;">
            <span class="material-symbols-rounded">search_off</span>
            <p>No se encontraron resultados</p>
          </div>
        </div>
      </div>
    </section>
  </div>

  <div id="confirmModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Confirmar sentencia</h2>
        <span class="close" id="closeModal">&times;</span>
      </div>
      <div class="modal-body">
        <div class="confirmation-details">
          <h3>Resumen de la sentencia:</h3>
          <div class="sentence-summary" id="sentenceSummary">
          </div>
          <p><strong>¿Estás seguro de que quieres aplicar esta sentencia?</strong></p>
          <p class="warning-text">Esta acción no se puede deshacer.</p>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn-cancel" id="cancelConfirm">Cancelar</button>
        <button type="button" class="btn-confirm" id="confirmApply">
          <span class="material-symbols-rounded">check</span>
          Confirmar sentencia
        </button>
      </div>
    </div>
  </div>

  <div id="loadingModal" class="modal">
    <div class="modal-content loading-modal">
      <div class="loading-spinner"></div>
      <p>Aplicando sentencia...</p>
    </div>
  </div>

  <div id="resultModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="resultTitle">Resultado</h2>
        <span class="close" id="closeResultModal">&times;</span>
      </div>
      <div class="modal-body">
        <div id="resultMessage">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn-primary" id="resultOkButton">OK</button>
      </div>
    </div>
  </div>
</Layout>

<style>
   .container {
       display: flex;
       flex-direction: column;
       height: 100vh;
       overflow: hidden;
   }

   .sticky-header {
       position: sticky;
       top: 0;
       z-index: 50;
       border-bottom: 1px solid var(--border-color);
       padding: 16px;
       flex-shrink: 0;
   }

   .header {
       margin-bottom: 16px;
   }

   .header-items-top {
       display: flex;
       flex-direction: row;
       align-items: center;
       gap: 0.40rem;
       margin-bottom: 8px;
   }

   .header-items-top h1 {
       font-size: 1.25rem;
       color: var(--text-primary);
       font-family: 'Funnel Display', sans-serif;
       font-weight: 400;
   }

   .header-items p {
       font-size: 1rem;
       color: var(--text-tertiary);
       margin: 2px 0;
   }
   
   .offense-resume-card {
       display: grid;
       grid-template-columns: 1fr 1fr 1fr;
       gap: 20px;
   }
   .body-section {
       flex: 1;
       overflow: hidden;
       padding: 16px;
   }
   
   .penal-codes-container {
       display: flex;
       flex-direction: row;
       gap: 16px;
       height: 100%;
   }
   .sidebar-container {
       display: flex;
       flex-direction: column;
       gap: 16px;
       width: 220px;
       flex-shrink: 0;
   }

   .category-sidebar {
       flex: 1;
   }
   .action-buttons {
       display: flex;
       flex-direction: column;
       gap: 12px;
       padding: 16px;
       background: var(--bg-secondary);
       border: 1px solid var(--border-color);
       border-radius: 8px;
   }

   .btn-cancel {
       display: flex;
       align-items: center;
       justify-content: center;
       gap: 8px;
       background: var(--bg-tertiary);
       color: var(--text-secondary);
       border: 1px solid var(--border-color);
       padding: 12px 16px;
       border-radius: 6px;
       cursor: pointer;
       transition: all 0.2s ease;
       font-size: 0.9rem;
   }

   .btn-cancel:hover {
       background: var(--bg-elevated);
       color: var(--text-primary);
   }

   .btn-apply {
       display: flex;
       align-items: center;
       justify-content: center;
       gap: 8px;
       background: var(--accent-green);
       color: white;
       border: none;
       padding: 12px 16px;
       border-radius: 6px;
       cursor: pointer;
       transition: all 0.2s ease;
       font-weight: 600;
       font-size: 0.9rem;
   }

   .btn-apply:enabled:hover {
       background: #34a853;
       transform: translateY(-1px);
   }

   .btn-apply:disabled {
       background: var(--bg-tertiary);
       color: var(--text-muted);
       cursor: not-allowed;
   }

   .penal-codes-card {
       display: flex;
       flex-direction: column;
       height: 100%;
       width: 100%;
       background-image: linear-gradient(to right bottom, #161920, #171b24, #181d28, #1a1f2c, #1b2130);
       padding: 16px;
       border: 1px solid var(--border-color);
       border-radius: 8px;
       overflow: hidden;
   }

   .search {
       display: flex;
       width: 100%;
       margin-bottom: 12px;
   }
   
   .search-input {
       background-color: transparent;
       border: 2px solid var(--border-color);
       border-radius: 5px;
       padding: 10px 12px;
       font-size: 1rem;
       font-family: 'Funnel Display', sans-serif;
       color: white;
       width: 100%;
       max-width: 300px;
       margin-left: auto;
   }

   .search-input:focus {
       outline: none;
       border-color: var(--accent-blue);
   }

   .penal-codes-grid {
       display: grid;
       grid-template-columns: 1fr;
       gap: 8px;
       overflow-y: auto;
       flex: 1;
       min-height: 0;
   }

   .error-banner {
       display: flex;
       align-items: center;
       gap: 8px;
       background: rgba(237, 137, 54, 0.1);
       border: 1px solid var(--accent-yellow);
       border-radius: 4px;
       padding: 8px 12px;
       margin-bottom: 8px;
       color: var(--accent-yellow);
   }

   .no-codes {
       display: flex;
       flex-direction: column;
       align-items: center;
       justify-content: center;
       gap: 1rem;
       flex: 1;
       color: var(--text-tertiary);
   }

   .no-codes span {
       font-size: 3rem;
       opacity: 0.5;
       color: var(--accent-red);
   }

   .retry-btn {
       display: flex;
       align-items: center;
       gap: 8px;
       background: var(--accent-blue);
       color: white;
       border: none;
       padding: 8px 16px;
       border-radius: 4px;
       cursor: pointer;
       transition: all 0.2s ease;
   }

   .retry-btn:hover {
       background: var(--sidebar-blue);
   }

   .no-results {
       display: flex;
       flex-direction: column;
       align-items: center;
       justify-content: center;
       gap: 1rem;
       flex: 1;
       color: var(--text-tertiary);
   }

   .no-results span {
       font-size: 3rem;
       opacity: 0.5;
   }

   .btn-confirm {
       display: flex;
       align-items: center;
       gap: 8px;
       background: var(--accent-red);
       color: white;
       border: none;
       padding: 12px 20px;
       border-radius: 6px;
       cursor: pointer;
       transition: all 0.2s ease;
       font-weight: 600;
   }

   .btn-confirm:hover {
       background: #e53e3e;
   }

   .btn-primary {
       background: var(--accent-blue);
       color: white;
       border: none;
       padding: 12px 20px;
       border-radius: 6px;
       cursor: pointer;
       transition: all 0.2s ease;
       font-weight: 600;
   }

   .btn-primary:hover {
       background: var(--sidebar-blue);
   }

   .modal {
       display: none;
       position: fixed;
       z-index: 1000;
       left: 0;
       top: 0;
       width: 100%;
       height: 100%;
       background-color: rgba(0, 0, 0, 0.8);
       backdrop-filter: blur(2px);
   }

   .modal-content {
       background: linear-gradient(135deg, var(--bg-secondary), var(--bg-tertiary));
       margin: 10% auto;
       padding: 0;
       border-radius: 12px;
       width: 90%;
       max-width: 500px;
       box-shadow: var(--shadow-lg);
       border: 1px solid var(--border-color);
       animation: slideIn 0.3s ease-out;
   }

   .loading-modal {
       text-align: center;
       padding: 40px;
       max-width: 300px;
   }

   .loading-spinner {
       width: 40px;
       height: 40px;
       border: 4px solid var(--border-color);
       border-top: 4px solid var(--accent-blue);
       border-radius: 50%;
       animation: spin 1s linear infinite;
       margin: 0 auto 20px;
   }

   @keyframes spin {
       0% { transform: rotate(0deg); }
       100% { transform: rotate(360deg); }
   }

   @keyframes slideIn {
       from {
           transform: translateY(-50px);
           opacity: 0;
       }
       to {
           transform: translateY(0);
           opacity: 1;
       }
   }

   .modal-header {
       padding: 20px;
       border-bottom: 1px solid var(--border-color);
       display: flex;
       justify-content: space-between;
       align-items: center;
   }

   .modal-header h2 {
       margin: 0;
       color: var(--text-primary);
       font-size: 1.5rem;
   }

   .close {
       color: var(--text-muted);
       font-size: 28px;
       font-weight: bold;
       cursor: pointer;
       transition: color 0.3s ease;
   }

   .close:hover {
       color: var(--text-primary);
   }

   .modal-body {
       padding: 20px;
   }

   .modal-footer {
       padding: 20px;
       border-top: 1px solid var(--border-color);
       display: flex;
       justify-content: flex-end;
       gap: 12px;
   }

   .sentence-summary {
       background: var(--bg-tertiary);
       border: 1px solid var(--border-color);
       border-radius: 8px;
       padding: 16px;
       margin: 16px 0;
   }

   .sentence-summary h4 {
       color: var(--text-primary);
       margin-bottom: 8px;
   }

   .sentence-summary p {
       color: var(--text-secondary);
       margin: 4px 0;
   }

   .warning-text {
       color: var(--accent-yellow);
       font-style: italic;
       margin-top: 16px;
   }

   .success-message {
       color: var(--accent-green);
       text-align: center;
   }

   .error-message {
       color: var(--accent-red);
       text-align: center;
   }
</style>

<script lang="ts">
(function () {
  const grid = document.getElementById('penalCodesGrid');
  const noResults = document.getElementById('noResults');
  const searchInput = document.getElementById('searchInput');

  // Estado actual del filtro
  let currentCategory = 'Todos';
  let currentSearch = '';

  // Todas las cards (usa tus data-* del componente PenalCodeItems)
  const cards = Array.from(grid.querySelectorAll('.card-wrapper'));

  function normalize(str) {
    return (str || '').toLowerCase().trim();
  }

  function applyFilters() {
    const term = normalize(currentSearch);
    let visible = 0;

    cards.forEach(card => {
      const cat = card.dataset.category || '';
      const name = card.dataset.name || '';
      const desc = card.dataset.description || '';

      const matchCategory = currentCategory === 'Todos' || cat === currentCategory;
      const matchSearch = !term ||
        normalize(name).includes(term) ||
        normalize(desc).includes(term);

      const show = matchCategory && matchSearch;
      card.style.display = show ? '' : 'none';
      if (show) visible++;
    });

    if (noResults) noResults.style.display = visible === 0 ? 'flex' : 'none';
  }

  // Search
  if (searchInput) {
    let timeout;
    searchInput.addEventListener('input', (e) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        currentSearch = e.target.value;
        applyFilters();
      }, 150);
    });
  }

  // Categoría (evento emitido por el sidebar)
  document.addEventListener('categoryChange', (e) => {
    currentCategory = e.detail.category;
    applyFilters();
  });

  // Primer render
  applyFilters();
})();
</script>
